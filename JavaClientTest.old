package com.javaclienttest;

import java.io.BufferedInputStream;
import java.io.File;
import java.io.FileInputStream;
import java.io.FileNotFoundException;
import java.io.FileOutputStream;
import java.io.IOException;
import java.io.InputStream;
import java.io.OutputStream;
import java.net.HttpURLConnection;
import java.net.MalformedURLException;
import java.net.URL;


// Code 413 is request to large
public class JavaClientTest
{
  static final int byteSize = 16;
  static final int bufferSize = 10240;

  // Set to true if testing on a local "Development mode" Server
  static final boolean LOCAL_ANDROID_RUN = true;
  
  static String bFileName = "Binary_File.b";
  static final String LOCAL_APP_ENGINE_SERVER_URL = "http://127.0.0.1:8888";

  static final String DEFAULT_ROOT_URL = "http://20.mydesk-cloud.appspot.com";
  static final String serverPath = "/mydesk_cloud/server";
  // added to URL to specify the name of the file
  static final String queryParameter = "?fileid=";
  static final String dumParameter = "&dumfile=True";
  
  //===========================================================================
  // Main
  public static void main(String[] args)
  { 
    createFileSendToServer();
    getFileVerifyContents();
  }
  
  public static void getFile(String fileName)
  {
    HttpURLConnection conn = null;
    FileOutputStream outfile = null;
    try
    { 
      outfile = new FileOutputStream(fileName);
      // Fetch the file and verify it's contents
      URL uploadUrl = new URL(getServerUrl() + queryParameter + fileName);
      conn = (HttpURLConnection)uploadUrl.openConnection();
      conn.setDoInput(true);
      conn.setRequestMethod("GET");
      int count = 0, bufferSize = 10240;
      
      byte [] data = new byte[bufferSize];
      InputStream in = conn.getInputStream();
     
      int length = 0;
      while((length = in.read(data, 0, bufferSize)) > 0)
      {  outfile.write(data, 0, length); }
      outfile.close();
      
      int http_status = conn.getResponseCode();
      System.out.println("Count : " + count);
      System.out.println("Status Code: " + http_status);
      
      if(http_status/100 != 2)
      {  throw new IOException("Bad status"); }
      
    }
    catch( MalformedURLException e )
    {  e.printStackTrace();  }
    catch( IOException e )
    {  e.printStackTrace();  }
    finally
    {
      if(conn != null)
      {  conn.disconnect();  }
      if(outfile != null)
      {  
        try
        {  outfile.close();  }
        catch( IOException e )
        { }  
      }
    } 
  }
  
  static public void sendFileToServer(String fileID)
  {
    HttpURLConnection conn = null;
    FileInputStream file = null;
    try
    {
      file = new FileInputStream(fileID);
      
      // Set connection properties and open connection to server
      URL serverUrl = new URL(getServerUrl() + queryParameter + fileID);
      conn = (HttpURLConnection)serverUrl.openConnection();
      conn.setDoOutput(true);
      conn.setRequestMethod("PUT");    
      OutputStream out = conn.getOutputStream();

      // Send file to server      
      byte [] buffer = new byte [bufferSize];
      int length = 0, count = 0;
      while((length = file.read(buffer, 0, bufferSize)) > 0)
      {
        out.write(buffer, 0, length);
        count++; // number of times we read from file
      }
      
      System.out.println("Count : " + count);
      int http_status = conn.getResponseCode();      
      System.out.println("Status Code: " + http_status);
      
      if(http_status/100 != 2) // Status codes not 2XX are bad
      {  throw new IOException("Bad status"); }            
    }
    catch( MalformedURLException e )
    {  e.printStackTrace();  }
    catch( IOException e )
    {  e.printStackTrace();  }
    finally
    {
      if(conn != null)
      {  conn.disconnect();  }
      if(file != null)
      {  
        try
        {  file.close();  }
        catch( IOException e )
        { }  
      }
    }    
  }  
  //===========================================================================
  // Creates a binary file and sends that file to the server for storage
  static public void createFileSendToServer()
  {
    createByteFile();
    HttpURLConnection conn = null;
    BufferedInputStream file = null;
    try
    {
      // Open file, create buffered stream
      File fileInfo = new File(bFileName);
      file = new BufferedInputStream(new FileInputStream(fileInfo), bufferSize);
      
      // Set connection properties and open connection to server
      URL serverUrl = new URL(getServerUrl() + queryParameter + bFileName + dumParameter);
      conn = (HttpURLConnection)serverUrl.openConnection();
      conn.setDoOutput(true);
      conn.setRequestMethod("PUT");    
      OutputStream out = conn.getOutputStream();

      // Send file to server      
      byte [] buffer = new byte [bufferSize];
      int length, count = 0;
      while((length = file.read(buffer)) > 0)
      {
        out.write(buffer, 0, length);
        count++; // number of times we read from file
      }
      
      System.out.println("Count : " + count);
      int http_status = conn.getResponseCode();      
      System.out.println("Status Code: " + http_status);
      
      if(http_status/100 != 2) // Status codes not 2XX are bad
      {  throw new IOException("Bad status"); }            
    }
    catch( MalformedURLException e )
    {  e.printStackTrace();  }
    catch( IOException e )
    {  e.printStackTrace();  }
    finally
    {
      if(conn != null)
      {  conn.disconnect();  }
      if(file != null)
      {  
        try
        {  file.close();  }
        catch( IOException e )
        { }  
      }
    }
  }
  
  //===========================================================================
  static public void getFileVerifyContents()
  {
    HttpURLConnection conn = null;
    BufferedInputStream file = null;
    try
    {                 
      // Fetch the file and verify it's contents
      URL uploadUrl = new URL(getServerUrl() + queryParameter + bFileName);
      conn = (HttpURLConnection)uploadUrl.openConnection();
      conn.setDoInput(true);
      conn.setRequestMethod("GET");
      int count = 0;
      
      byte [] data = new byte[16];
      InputStream in = conn.getInputStream();
      while(in.read(data) > 0)
      {  count++; }
      
      int http_status = conn.getResponseCode();
      System.out.println("Count : " + count);
      System.out.println("Status Code: " + http_status);
      
      if(http_status/100 != 2)
      {  throw new IOException("Bad status"); }
      
      verifyFile(data);
    }
    catch( MalformedURLException e )
    {  e.printStackTrace();  }
    catch( IOException e )
    {  e.printStackTrace();  }
    finally
    {
      if(conn != null)
      {  conn.disconnect();  }
      if(file != null)
      {  
        try
        {  file.close();  }
        catch( IOException e )
        { }  
      }
    }
  }
  //===========================================================================
  // Return a URL pointing to the server depending if testing in local 
  // development mode or remote
  static public String getServerUrl()
  {
    String fileUrl;
    if(LOCAL_ANDROID_RUN)
    {  fileUrl = LOCAL_APP_ENGINE_SERVER_URL + serverPath;  }
    else
    {  fileUrl = DEFAULT_ROOT_URL + serverPath;  }
    return fileUrl;
  }
  
  //===========================================================================
  // Verify the binary file worked
  static void verifyFile(byte [] data)
  {
    int i=0;
    for(byte b: data)
    {
      System.out.print(""+ b + " ");
      if((i % 4) == 3)
      { System.out.println();  }
      i++;
    }      
    System.out.println("Done");    
  }
  
  //===========================================================================
  // Create some binary data to send to the server
  static public void createByteFile()
  {
    FileOutputStream file;
    try
    {
      file = new FileOutputStream(bFileName);
      byte [] data = new byte [byteSize];
      data[0] = 6;   data[1] = 8;   data[2] = 2;   data[3] = 1;
      data[4] = 6;   data[5] = 8;   data[6] = 2;   data[7] = 1;
      data[8] = -6;  data[9] = -8;  data[10] = -2; data[11] = -1;
      data[12] = -6; data[13] = -8; data[14] = -2; data[15] = -1;

      file.write(data, 0, byteSize);
      file.close();      
      System.out.println("Done");
    }
    catch( FileNotFoundException e )
    {
      System.out.println("File not found");
      e.printStackTrace();
    }
    catch( IOException e )
    {
      System.out.println("IOException");
      e.printStackTrace();
    }
    
  }  
}
